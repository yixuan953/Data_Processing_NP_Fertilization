# This code is used to:
# Expand the harvest area in 2000 to 60 years according to HYDE3.3
# The code is adjusted basded the methods used in:
# Coello, F., Decorte, T., Janssens, I. et al. Global Crop-Specific Fertilization Dataset from 1961â€“2019. Sci Data 12, 40 (2025). https://doi.org/10.1038/s41597-024-04215-x
# Link for the original code: https://github.com/STAN-UAntwerp/fertilizers_use_by_crop

# To run this code, three datasets are required:
# 1) HYDE3.3 LU: https://geo.public.data.uu.nl/vault-hyde/HYDE%203.3%5B1710493486%5D/original/hyde33_c7_base_mrt2023/zip/ [km2 per grid cells]
# 2) Gridded harvest area from EARTHSTAT (Monfreda et al., 2008) [should be hectors]
# 3) Maximum area of per cell [ha] (code generated by ChatGPT) - Data and code could be found on HPC: /lustre/nobackup/WUR/ESG/zhou111/Data/Raw/General


import pandas as pd 
import numpy as np 
import rasterio

# Function to fill matrix with average of closest cells at same distance
# This section is also highlighted in the paper, more specifically
# When the Monfreda map does not have a value in a cell, but the hyde map does
# We search for the closest cells and take the average
def fill_zeros_with_avg(matrix,final_mask):
    filled_matrix = matrix.copy()
    zero_indices = np.argwhere(final_mask)
    for i, j in zero_indices:
        for rr in [5,10,25,50,100,150,200,250]:
            min_row = max(0, i - rr)
            max_row = min(matrix.shape[0], i + rr+1)
            min_col = max(0, j - rr)
            max_col = min(matrix.shape[1], j + rr+1)
            grid = matrix[min_row:max_row, min_col:max_col]
            if np.mean(grid) > 0:
                filled_matrix[i, j] = np.mean(grid)
                break
    output = np.where(final_mask, filled_matrix, matrix)    
    return output 

# Function to calculate the division of monfreda and hyde based on the crop 
def start_eq_1(crop_part,year):
    
    # Path of the harvested area of EARTHSTAT (Monfreda et al., 2008)
    tif_file = "input/{crop_part}_MC.tif".format(crop_part=crop_part)
    tif_file_sum = "input/Sum_MC.tif"
    
    # Path of the HYDE3.3 cropland area
    if crop_part == "Rice": 
        asc_file = "/lustre/nobackup/WUR/ESG/zhou111/Data/Raw/HYDE3.3/tot_rice{year}AD.asc".format(year=year)
        asc_file_2000 = "/lustre/nobackup/WUR/ESG/zhou111/Data/Raw/HYDE3.3/tot_rice2000AD.asc"
        tif_file_sum = tif_file
    else:
        asc_file = "/lustre/nobackup/WUR/ESG/zhou111/Data/Raw/HYDE3.3/cropland{year}AD.asc".format(year=year)
        asc_file_2000 = "/lustre/nobackup/WUR/ESG/zhou111/Data/Raw/HYDE3.3/cropland2000AD.asc"

    
    tif_file_max_size = "/lustre/nobackup/WUR/ESG/zhou111/Data/Raw/General/pixel_area_ha_5arcmin.tiff"
    with rasterio.open(tif_file_max_size) as src:
            max_cell_size = src.read(1)
            metadata = src.profile
        
    with rasterio.open(tif_file) as src:
        MC_Crop_data = src.read(1)
        metadata = src.profile
    
    with rasterio.open(asc_file_2000) as src:
        Hyde_2000_data = src.read(1)
    Hyde_2000_data = np.where(Hyde_2000_data == -9999.0, 0, Hyde_2000_data)

    with rasterio.open(asc_file) as src:
        Hyde_data_year = src.read(1)
    Hyde_data_year = np.where(Hyde_data_year == -9999.0, 0, Hyde_data_year)
    
    with rasterio.open(tif_file_sum) as src:
        monfreda_sum = src.read(1)
        
    Hyde_data_year[Hyde_data_year < 1] = 0
    Hyde_2000_data[Hyde_2000_data < 1] = 0
        
    mask1 = Hyde_data_year > 0
    mask2 = monfreda_sum == 0
    final_mask = np.logical_and(mask1, mask2)
    
    MC_Crop_data = fill_zeros_with_avg(MC_Crop_data,final_mask)
    div_res = np.divide(MC_Crop_data, Hyde_2000_data, 
                        out=np.zeros_like(MC_Crop_data), where=(Hyde_2000_data != 0))
    H_Area_M = div_res * Hyde_data_year
    
    if crop_part == "Rice": 
        H_Area_M = Hyde_data_year
    
    H_Area_M = np.where(H_Area_M > max_cell_size, max_cell_size, H_Area_M)
    
    # The path of the output rasters
    with rasterio.open("/lustre/nobackup/WUR/ESG/zhou111/Data/Processed/Fertilization/HA_P_Fert_60yr/EQ1_{crop_part}_{year}.tiff".format(crop_part=crop_part,
                                                                                                                                          year=year), 'w', **metadata) as output_raster:
        output_raster.write(H_Area_M,1)    
    return H_Area_M

# Looping over the various crops and years to obtain that specific crop/year map to move further to step 2 (R script)
crop_data_all = pd.DataFrame({
    "crop_code": ["15", "56", "27", "226"], # df1
    # "crop_code": ["1_1", "1_2", "1_3", "1_4", "2_1", "2_2", "2_3", "3_1", "3_2", "4", "5", "6", "7"], # The code used in ML
    "crop_name": ["Wheat", "Maize", "Rice",  "Soybean"]
    # "crop_name": ["Wheat", "Maize", "Rice", "Other Cereals", "Soybean", "Palm Oil fruit", "Other Oilseeds", "Vegetables", "Fruits", "Roots and tubers", "Sugar crops", "Fiber crops", "Other crops"]
})

for year in range(1960, 2020):
    for i,row in crop_data_all.iterrows():
        print(row['crop_name'],year)
        H_Area_M = start_eq_1(row['crop_name'],year)